// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: Storage.proto

package storageclient

import (
	"context"

	"Storage/pb/Storage/storage"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchDeleteTasksRequest = storage.BatchDeleteTasksRequest
	CreateTaskRequest       = storage.CreateTaskRequest
	CreateTaskResponse      = storage.CreateTaskResponse
	DeleteTaskRequest       = storage.DeleteTaskRequest
	Empty                   = storage.Empty
	OperationResponse       = storage.OperationResponse
	Task                    = storage.Task
	TaskList                = storage.TaskList
	UpdateTaskRequest       = storage.UpdateTaskRequest
	ViewTaskRequest         = storage.ViewTaskRequest

	Storage interface {
		// 添加新任务
		CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
		// 删除任务
		DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*OperationResponse, error)
		// 更新任务
		UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*OperationResponse, error)
		// 查看单个任务详情
		ViewTask(ctx context.Context, in *ViewTaskRequest, opts ...grpc.CallOption) (*Task, error)
		// 列出所有任务
		ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error)
		// 批量删除任务
		BatchDeleteTasks(ctx context.Context, in *BatchDeleteTasksRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	}

	defaultStorage struct {
		cli zrpc.Client
	}
)

func NewStorage(cli zrpc.Client) Storage {
	return &defaultStorage{
		cli: cli,
	}
}

// 添加新任务
func (m *defaultStorage) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	client := storage.NewStorageClient(m.cli.Conn())
	return client.CreateTask(ctx, in, opts...)
}

// 删除任务
func (m *defaultStorage) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	client := storage.NewStorageClient(m.cli.Conn())
	return client.DeleteTask(ctx, in, opts...)
}

// 更新任务
func (m *defaultStorage) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	client := storage.NewStorageClient(m.cli.Conn())
	return client.UpdateTask(ctx, in, opts...)
}

// 查看单个任务详情
func (m *defaultStorage) ViewTask(ctx context.Context, in *ViewTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	client := storage.NewStorageClient(m.cli.Conn())
	return client.ViewTask(ctx, in, opts...)
}

// 列出所有任务
func (m *defaultStorage) ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskList, error) {
	client := storage.NewStorageClient(m.cli.Conn())
	return client.ListTasks(ctx, in, opts...)
}

// 批量删除任务
func (m *defaultStorage) BatchDeleteTasks(ctx context.Context, in *BatchDeleteTasksRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	client := storage.NewStorageClient(m.cli.Conn())
	return client.BatchDeleteTasks(ctx, in, opts...)
}
